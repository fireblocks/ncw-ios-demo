// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios14.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name FireblocksDev
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CommonCrypto
@_exported import FireblocksDev
import Foundation
import LocalAuthentication
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
final public class FireblocksOptions {
  public init(env: FireblocksDev.FireblocksEnvironment = FireblocksEnvironment.defaultEnvironment, eventHandlerDelegate: (any FireblocksDev.EventHandlerDelegate)? = nil, logLevel: FireblocksDev.LogLevel = .info)
  @objc deinit
}
public enum KeyRecoveryStatus : Swift.String, Swift.Codable {
  case DOWNLOADED
  case SUCCESS
  case ERROR
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_hasMissingDesignatedInitializers final public class KeyRecovery : ObjectiveC.NSObject, Swift.Codable {
  final public var keyId: Swift.String {
    get
  }
  final public var algorithm: FireblocksDev.Algorithm {
    get
  }
  final public var keyRecoveryStatus: FireblocksDev.KeyRecoveryStatus {
    get
  }
  final public func description() -> Swift.String
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum FireblocksEvent {
  case KeyCreation(FireblocksDev.KeyDescriptor, _: FireblocksDev.FireblocksError? = nil)
  case Backup(FireblocksDev.KeyBackup, _: FireblocksDev.FireblocksError? = nil)
  case Recover(FireblocksDev.KeyRecovery?, _: FireblocksDev.FireblocksError? = nil)
  case Transaction(FireblocksDev.TransactionSignature, _: FireblocksDev.FireblocksError? = nil)
  case Takeover(FireblocksDev.KeyTakeover, _: FireblocksDev.FireblocksError? = nil)
  case JoinWallet(FireblocksDev.JoinWalletDescriptor, _: FireblocksDev.FireblocksError? = nil)
}
@_hasMissingDesignatedInitializers final public class Fireblocks {
  public static func getInstance(deviceId: Swift.String) throws -> FireblocksDev.Fireblocks
  public static func getPhysicalDeviceId() -> Swift.String
  public static func initialize(deviceId: Swift.String, messageHandlerDelegate: any FireblocksDev.MessageHandlerDelegate, keyStorageDelegate: any FireblocksDev.KeyStorageDelegate, fireblocksOptions: FireblocksDev.FireblocksOptions = FireblocksOptions()) throws -> FireblocksDev.Fireblocks
  @objc deinit
}
extension FireblocksDev.Fireblocks {
  final public func getURLForLogFiles() -> Foundation.URL?
  @available(*, deprecated, message: "Use getURLForLogFiles() instead")
  final public func sendLogs(callback: @escaping (Swift.Bool) -> ())
  final public func getCurrentStatus() -> FireblocksDev.Status
}
extension FireblocksDev.Fireblocks {
  public static func generateDeviceId() -> Swift.String
  public static func generateRandomPassPhrase() -> Swift.String
  public static func generatePassphraseId() -> Swift.String
  #if compiler(>=5.3) && $AsyncAwait
  final public func generateMPCKeys(algorithms: Swift.Set<FireblocksDev.Algorithm>) async throws -> Swift.Set<FireblocksDev.KeyDescriptor>
  #endif
  final public func generateMPCKeys(algorithms: Swift.Set<FireblocksDev.Algorithm>, callback: @escaping (Swift.Set<FireblocksDev.KeyDescriptor>) -> ()) throws
  final public func getKeysStatus() -> [FireblocksDev.KeyDescriptor]
}
extension FireblocksDev.Fireblocks {
  #if compiler(>=5.3) && $AsyncAwait
  final public func backupKeys(passphrase: Swift.String, passphraseId: Swift.String) async throws -> Swift.Set<FireblocksDev.KeyBackup>
  #endif
  final public func backupKeys(passphrase: Swift.String, passphraseId: Swift.String, callback: @escaping (Swift.Set<FireblocksDev.KeyBackup>) -> ()) throws
}
extension FireblocksDev.Fireblocks {
  #if compiler(>=5.3) && $AsyncAwait
  final public func recoverKeys(passphraseResolver: any FireblocksDev.FireblocksPassphraseResolver) async throws -> Swift.Set<FireblocksDev.KeyRecovery>
  #endif
  final public func recoverKeys(passphraseResolver: any FireblocksDev.FireblocksPassphraseResolver, callback: @escaping (Swift.Set<FireblocksDev.KeyRecovery>) -> ()) throws
}
extension FireblocksDev.Fireblocks {
  #if compiler(>=5.3) && $AsyncAwait
  final public func signTransaction(txId: Swift.String) async throws -> FireblocksDev.TransactionSignature
  #endif
  final public func signTransaction(txId: Swift.String, callback: @escaping (FireblocksDev.TransactionSignature) -> ()) throws
  final public func getTransactionSignatureStatus(txId: Swift.String) -> FireblocksDev.TransactionSignature
}
extension FireblocksDev.Fireblocks {
  #if compiler(>=5.3) && $AsyncAwait
  final public func takeover() async throws -> Swift.Set<FireblocksDev.FullKey>
  #endif
  final public func takeover(callback: @escaping (Swift.Set<FireblocksDev.FullKey>) -> ()) throws
  #if compiler(>=5.3) && $AsyncAwait
  final public func exportFullKeys(chainCode: Swift.String, cloudKeyShares: [Swift.String : Swift.Set<Swift.String>]) async throws -> Swift.Set<FireblocksDev.FullKey>
  #endif
  final public func exportFullKeys(chainCode: Swift.String, cloudKeyShares: [Swift.String : Swift.Set<Swift.String>], callback: @escaping (Swift.Set<FireblocksDev.FullKey>) -> ()) throws
  #if compiler(>=5.3) && $AsyncAwait
  final public func deriveAssetKey(extendedPrivateKey: Swift.String, bip44DerivationParams: FireblocksDev.DerivationParams) async throws -> FireblocksDev.KeyData
  #endif
  final public func deriveAssetKey(extendedPrivateKey: Swift.String, bip44DerivationParams: FireblocksDev.DerivationParams, callback: @escaping (FireblocksDev.KeyData) -> ()) throws
}
extension FireblocksDev.Fireblocks {
  #if compiler(>=5.3) && $AsyncAwait
  final public func requestJoinExistingWallet(joinWalletHandler: any FireblocksDev.FireblocksJoinWalletHandler) async throws -> Swift.Set<FireblocksDev.KeyDescriptor>
  #endif
  final public func requestJoinExistingWallet(joinWalletHandler: any FireblocksDev.FireblocksJoinWalletHandler, callback: @escaping (Swift.Set<FireblocksDev.KeyDescriptor>) -> ()) throws
  #if compiler(>=5.3) && $AsyncAwait
  final public func approveJoinWalletRequest(requestId: Swift.String) async throws -> Swift.Set<FireblocksDev.JoinWalletDescriptor>
  #endif
  final public func approveJoinWalletRequest(requestId: Swift.String, callback: @escaping (Swift.Set<FireblocksDev.JoinWalletDescriptor>) -> ()) throws
  final public func stopJoinWallet()
}
public enum JoinWalletStatus : Swift.String, Swift.Codable, Swift.Equatable {
  case JOIN_INITIATED
  case ADD_DEVICE_SETUP_REQUESTED
  case PROVISIONER_FOUND
  case PROVISION_INITIATED
  case PROVISION_ADD_DEVICE_SETUP_REQUESTED
  case PROVISION_KEYS_SETUP_STARTED
  case PROVISION_SETUP_STARTED
  case PROVISION_SETUP_COMPLETED
  case STOPPED
  case TIMEOUT
  case ERROR
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers final public class Envs {
  public static let shared: FireblocksDev.Envs
  final public var envs: [Swift.String : FireblocksDev.Env]
  final public var all: [FireblocksDev.Env] {
    get
  }
  final public var defaultEnv: FireblocksDev.Env {
    get
  }
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers final public class KeyDescriptor : ObjectiveC.NSObject, Swift.Codable, Swift.Identifiable {
  final public var keyId: Swift.String {
    get
  }
  final public var algorithm: FireblocksDev.Algorithm {
    get
  }
  final public var keyStatus: FireblocksDev.KeyStatus {
    get
  }
  final public func description() -> Swift.String
  public typealias ID = Swift.ObjectIdentifier
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum KeyTakeoverStatus : Swift.String, Swift.Codable, Swift.Equatable {
  case INITIATED
  case CLOUD_SHARES_REQUESTED
  case CLOUD_SHARES_VERIFIED
  case SUCCESS
  case TIMEOUT
  case ERROR
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_hasMissingDesignatedInitializers final public class JoinWalletDescriptor : ObjectiveC.NSObject, Swift.Codable, Swift.Identifiable {
  final public var requestId: Swift.String? {
    get
  }
  final public var provisionKeyId: Swift.String? {
    get
  }
  final public var algorithm: FireblocksDev.Algorithm? {
    get
  }
  final public var status: FireblocksDev.JoinWalletStatus? {
    get
  }
  final public func description() -> Swift.String
  public typealias ID = Swift.ObjectIdentifier
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol KeyStorageDelegate : AnyObject {
  func store(keys: [Swift.String : Foundation.Data], callback: @escaping ([Swift.String : Swift.Bool]) -> ())
  func load(keyIds: Swift.Set<Swift.String>, callback: @escaping ([Swift.String : Foundation.Data]) -> ())
  func remove(keyId: Swift.String)
  func contains(keyIds: Swift.Set<Swift.String>, callback: @escaping ([Swift.String : Swift.Bool]) -> ())
}
public protocol MessageHandlerDelegate : AnyObject {
  func handleOutgoingMessage(payload: Swift.String, response: @escaping (Swift.String?) -> (), error: @escaping (Swift.String?) -> ())
}
public protocol EventHandlerDelegate : AnyObject {
  func onEvent(event: FireblocksDev.FireblocksEvent)
}
@objc @_hasMissingDesignatedInitializers final public class FullKey : ObjectiveC.NSObject, Swift.Codable {
  final public var keyId: Swift.String? {
    get
  }
  final public var privateKey: Swift.String? {
    get
  }
  final public var publicKey: Swift.String? {
    get
  }
  final public var algorithm: FireblocksDev.Algorithm? {
    get
  }
  final public var error: FireblocksDev.FireblocksError? {
    get
  }
  final public func description() -> Swift.String
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class ClearDevice {
  public static func clear(deviceId: Swift.String? = nil)
  @objc deinit
}
public struct FireblocksError : Swift.Error, Swift.Codable, Swift.Equatable {
  public let message: Swift.String
  public let code: Swift.Int
  public static func == (lhs: FireblocksDev.FireblocksError, rhs: FireblocksDev.FireblocksError) -> Swift.Bool
  public var description: Swift.String {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DerivationParams {
  public var coinType: Swift.Int
  public var account: Swift.Int
  public var change: Swift.Int
  public var index: Swift.Int
  public init(coinType: Swift.Int, account: Swift.Int, change: Swift.Int, index: Swift.Int)
}
@_hasMissingDesignatedInitializers final public class KeyTakeover : Swift.Codable, Swift.Hashable {
  public static func == (lhs: FireblocksDev.KeyTakeover, rhs: FireblocksDev.KeyTakeover) -> Swift.Bool
  final public func hash(into hasher: inout Swift.Hasher)
  final public var keyId: Swift.String? {
    get
  }
  final public var algorithm: FireblocksDev.Algorithm? {
    get
  }
  final public var keyTakeoverStatus: FireblocksDev.KeyTakeoverStatus? {
    get
  }
  final public func description() -> Swift.String
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  final public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public protocol FireblocksPassphraseResolver {
  func resolve(passphraseId: Swift.String, callback: @escaping (Swift.String) -> ())
}
public protocol FireblocksJoinWalletHandler : AnyObject {
  func onRequestId(requestId: Swift.String)
  func onProvisionerFound()
}
extension FireblocksDev.FireblocksJoinWalletHandler {
  public func onProvisionerFound()
}
public enum KeyBackupStatus : Swift.String, Swift.Codable {
  case SUCCESS
  case ERROR
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_hasMissingDesignatedInitializers final public class KeyBackup : ObjectiveC.NSObject, Swift.Codable {
  final public var keyId: Swift.String? {
    get
  }
  final public var keyBackupStatus: FireblocksDev.KeyBackupStatus {
    get
  }
  final public func description() -> Swift.String
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Env : Swift.Equatable, Swift.Decodable {
  public static func == (lhs: FireblocksDev.Env, rhs: FireblocksDev.Env) -> Swift.Bool
  public let trustedRootCa: Swift.String
  public let unTrustedRootCa: Swift.String
  public var name: Swift.String
  public init(from decoder: any Swift.Decoder) throws
}
public enum LogLevel : Swift.String {
  case none
  case verbose
  case debug
  case info
  case warn
  case error
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers final public class Status : Swift.Codable, Swift.Equatable {
  public static func == (lhs: FireblocksDev.Status, rhs: FireblocksDev.Status) -> Swift.Bool
  final public var description: Swift.String {
    get
  }
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum DeviceStatus : Swift.String, Swift.Equatable, Swift.Codable {
  case notInitialized
  case initialized
  case failedToInitialize
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum Algorithm : Swift.String, Swift.Codable, Swift.CaseIterable {
  case MPC_EDDSA_ED25519
  case MPC_ECDSA_SECP256K1
  public init?(rawValue: Swift.String)
  public typealias AllCases = [FireblocksDev.Algorithm]
  public typealias RawValue = Swift.String
  public static var allCases: [FireblocksDev.Algorithm] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers final public class KeyData : Swift.Codable, Swift.Equatable, Swift.Hashable {
  final public var data: Swift.String? {
    get
  }
  final public var error: FireblocksDev.FireblocksError? {
    get
  }
  public static func == (lhs: FireblocksDev.KeyData, rhs: FireblocksDev.KeyData) -> Swift.Bool
  final public func hash(into hasher: inout Swift.Hasher)
  final public func description() -> Swift.String
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  final public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public enum FireblocksEnvironment : Swift.String, Swift.CaseIterable {
  case dev1
  case dev2
  case dev3
  case dev4
  case dev5
  case dev6
  case dev7
  case dev8
  case dev9
  case dev10
  case stage
  public static let defaultEnvironment: FireblocksDev.FireblocksEnvironment
  public init?(rawValue: Swift.String)
  public typealias AllCases = [FireblocksDev.FireblocksEnvironment]
  public typealias RawValue = Swift.String
  public static var allCases: [FireblocksDev.FireblocksEnvironment] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum TransactionSignatureStatus : Swift.String {
  case PENDING
  case ONGOING
  case ERROR
  case COMPLETED
  case TIMEOUT
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers final public class TransactionSignature : Swift.Equatable, Swift.Hashable {
  final public let txId: Swift.String
  final public let transactionSignatureStatus: FireblocksDev.TransactionSignatureStatus
  public static func == (lhs: FireblocksDev.TransactionSignature, rhs: FireblocksDev.TransactionSignature) -> Swift.Bool
  final public func hash(into hasher: inout Swift.Hasher)
  final public func description() -> Swift.String
  @objc deinit
  final public var hashValue: Swift.Int {
    get
  }
}
public enum KeyStatus : Swift.String, Swift.Codable, Swift.Equatable {
  case INITIATED
  case REQUESTED_SETUP
  case SETUP
  case SETUP_COMPLETE
  case READY
  case TIMEOUT
  case ERROR
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension FireblocksDev.KeyRecoveryStatus : Swift.Equatable {}
extension FireblocksDev.KeyRecoveryStatus : Swift.Hashable {}
extension FireblocksDev.KeyRecoveryStatus : Swift.RawRepresentable {}
extension FireblocksDev.JoinWalletStatus : Swift.Hashable {}
extension FireblocksDev.JoinWalletStatus : Swift.RawRepresentable {}
extension FireblocksDev.KeyTakeoverStatus : Swift.Hashable {}
extension FireblocksDev.KeyTakeoverStatus : Swift.RawRepresentable {}
extension FireblocksDev.KeyBackupStatus : Swift.Equatable {}
extension FireblocksDev.KeyBackupStatus : Swift.Hashable {}
extension FireblocksDev.KeyBackupStatus : Swift.RawRepresentable {}
extension FireblocksDev.LogLevel : Swift.Equatable {}
extension FireblocksDev.LogLevel : Swift.Hashable {}
extension FireblocksDev.LogLevel : Swift.RawRepresentable {}
extension FireblocksDev.DeviceStatus : Swift.Hashable {}
extension FireblocksDev.DeviceStatus : Swift.RawRepresentable {}
extension FireblocksDev.Algorithm : Swift.Equatable {}
extension FireblocksDev.Algorithm : Swift.Hashable {}
extension FireblocksDev.Algorithm : Swift.RawRepresentable {}
extension FireblocksDev.FireblocksEnvironment : Swift.Equatable {}
extension FireblocksDev.FireblocksEnvironment : Swift.Hashable {}
extension FireblocksDev.FireblocksEnvironment : Swift.RawRepresentable {}
extension FireblocksDev.TransactionSignatureStatus : Swift.Equatable {}
extension FireblocksDev.TransactionSignatureStatus : Swift.Hashable {}
extension FireblocksDev.TransactionSignatureStatus : Swift.RawRepresentable {}
extension FireblocksDev.KeyStatus : Swift.Hashable {}
extension FireblocksDev.KeyStatus : Swift.RawRepresentable {}
